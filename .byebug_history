exit
find_by(name: raw_country_name)
find_by(name: raw_country_name).display_name
(byebug) raw_country_name
raw_country_name
c
raw_country_name
exit
raw_country_name
exit
country_display_name
exit
country_diaplay_name = CountryAlias.country_display_name(raw_country_name)
exit
score.gsub(/[^\d^\.]/, '').to_f
score..gsub(/[^\d^\.]/, '').to_f
score.to_f
score.to_float
score.to_i
score
acore
c
table.underscore.gsub("raw_", "").to_sym
table.underscore.gsub("raw_", "")
table.underscore
attribute_name(table)
country
c
scores
exit
raw_country_name
CountryAlias.find_by(name: raw_country_name)
country_display_name(raw_country_name)
exit
CountryAlias.first
CountryAlias.find_by(name: raw_country_name)
raw_country_name
country_display_name(raw_country_name)
exit
CountryAlias.find_by(name: raw_country_name)
CountryAlias.first
country_display_name(raw_country_name)
raw_country_name
c
@driver.get(url)
url
c
scores
c
scores.map{|s| s[1]}.max
scores.map{|s| puts s[1]}
scores[1]
scores.count
scores
exit
Country.find_by(name: "Kazakhstan")
RawReadingScore.pluck(:score)
RawReadingScores.pluck(:score)
scores
exit
table
scores
exit
scores
c
scores.count
scores
c
@current_results
c
default_results.reject{|v| v[:value] == 0 }.sort_by {|v|  v[:value]}
c
exit
default_results.sort_by {|v|  v[:value]}.last
default_results.first
default_results.last
default_results.sort_by {|v|  v["value"]}.last
default_results.sort_by {|v|  v["value"]}.first
default_results.sort_by {|v|  v["value"]}
params[:current_results]
c
default_results
c
default_results
exit
c
exit
c
score = eval("country.#{category}")
c
weighted_categories
weighted_categories.reduce(:+)/ weight_params.map{ |key, value| value.to_i }.reduce(:+)
weight_params.map{ |key, value| value.to_i }.reduce(:+)
weighted_categories.reduce(:+)
c
weight_params
score * weight_params["#{category}_value".to_sym].to_i
weight_params["#{category}_value".to_sym].to_i
score = eval("country.#{category}")
weighted_categories
exit
weight_params["#{category_name(category)}_value".to_sym].to_i
eval("country.#{category_name(category)}")
category
exit
weighted_categories
c
exit
RawFreedomOfPressScore.all.count
RawFreedomOfPress.all.count
scores
scores.count
table
c
scores.count
table
c
scores.count
table
c
table
scores.count
c
scores.count
table
c
table
scores.count
exit
c
exit
c
attribute_name(table)
table
score
country_display_name(raw_country_name)
Country.find_by(name: country_display_name(raw_country_name)).update(attribute_name(table) => score)
exit
c
exit
raw_country_name
c
labeled_for_reuse.click
c
usage_rights.click
usage_rights = driver.find_element(:xpath, "//*[contains(text(), 'Usage rights')]")
c
labeled_for_reuse.click
labeled_for_reuse = driver.find_element(:css, "li#sur_fc")
labeled_for_reuse = driver.find_element(:css, "li #sur_fc")
labeled_for_reuse.click
labeled_for_reuse = driver.find_element(:css, "#sur_fc")
labeled_for_reuse = driver.find_element(:css, "#sur_fc a")
labeled_for_reuse.click
labeled_for_reuse
labeled_for_reuse.click
labeled_for_reuse
c
usage_rights.click
c
country.name
c
@countries
c
exit
@countries.each { |c| puts c.name}
@countries.count
@countries
@countries.each { |c| puts c}
@countries.each { |c| normal_rank = eval("c.#{association_name}.try(:normalized_score)") || 0 }
@countries
exit
c
categories_with_values.map{ |category, value| value == nil ? category : nil }.compact.to_sentence
categories_with_values.map{ |category, value| value == 0 ? category : nil }.compact.to_sentence
c
categories_with_values.values.include?(nil)
categories_with_values.include?(nil)
categories_with_values = Hash[categories.collect { |category| [category, eval("country.#{category}.try(:normalized_score)")] } ]
Hash[categories.collect { |category| [category, eval("country.#{category}.try(:normalized_score)")] } ]
c
weight_params.values
weight_params
weighted_categories
c
weight_params["#{category}_value".to_sym].to_i
weight_params["#{category}_value".to_sym].to_I
weight_params["#{category}_value".to_sym].to_int
weight_params["#{category}_value".to_sym]
score = eval("country.#{category}.try(:normalized_score)")
c
categories.map { |category| eval("country.#{category}.try(:normalized_score)")}c
categories.map { |category| eval("country.#{category}.try(:normalized_score)")}
categories.map { |category| eval("country.#{category}")}
categories.map { |category| eval("country.#{category}.normalized_score")}
exit
categories.map { |category| puts eval("country.#{category}.normalized_score")}exit
categories.map { |category| puts eval("country.#{category}.normalized_score")}
categories.map { |category| puts eval("country.#{category}")}
categories.map { |category| puts eval("country.category")}
categories.map { |category| puts eval("country")}
categories.map { |category| puts eval("#{country}")}
categories.map { |category| puts "#{country}"}
categories.map { |category| puts country}
categories.map { |category| country."#{category}"}
categories.map { |category| eval("#{country}.#{category}")}
country.science_rank.normalized_score
categories.map { |category| eval("#{country}.#{category}.normalized_score")}
country.science_rank
country
c
country
c
country
c
country.science_rank
country
c
country.science_rank
country
c
country
c
country
c
country
c
cc
country
c
country
country.science_rank
c
country.science_rank
country
c
country.science_rankc
country.science_rank.score
country.science_rank.first
country.science_rank
category
country
categories.map{|category| puts eval(country."#{category}")}
categories.map{|category| puts eval("#{category}")}
country
categories.map{|category| puts eval("#{country}")}
categories.map{|category| puts eval("#{category}")}
categories.map{|category| puts eval(#{category}")}
categories.map{|category| puts eval(country."#{category}")}
categories.map{|category| puts country.category}
categories.map{|category| puts eval("#{country}.#{category}")}
categories.map{|category| puts eval("#{country}.#{category}.normalized_score")}
categories.map{|category| eval("#{country}.#{category}.normalized_score")}
categories.map{|category| puts category}
category
country
