c
exit
RawFreedomOfPressScore.all.count
RawFreedomOfPress.all.count
scores
scores.count
table
c
scores.count
table
c
scores.count
table
c
table
scores.count
c
scores.count
table
c
table
scores.count
exit
c
exit
c
attribute_name(table)
table
score
country_display_name(raw_country_name)
Country.find_by(name: country_display_name(raw_country_name)).update(attribute_name(table) => score)
exit
c
exit
raw_country_name
c
labeled_for_reuse.click
c
usage_rights.click
usage_rights = driver.find_element(:xpath, "//*[contains(text(), 'Usage rights')]")
c
labeled_for_reuse.click
labeled_for_reuse = driver.find_element(:css, "li#sur_fc")
labeled_for_reuse = driver.find_element(:css, "li #sur_fc")
labeled_for_reuse.click
labeled_for_reuse = driver.find_element(:css, "#sur_fc")
labeled_for_reuse = driver.find_element(:css, "#sur_fc a")
labeled_for_reuse.click
labeled_for_reuse
labeled_for_reuse.click
labeled_for_reuse
c
usage_rights.click
c
country.name
c
@countries
c
exit
@countries.each { |c| puts c.name}
@countries.count
@countries
@countries.each { |c| puts c}
@countries.each { |c| normal_rank = eval("c.#{association_name}.try(:normalized_score)") || 0 }
@countries
exit
c
categories_with_values.map{ |category, value| value == nil ? category : nil }.compact.to_sentence
categories_with_values.map{ |category, value| value == 0 ? category : nil }.compact.to_sentence
c
categories_with_values.values.include?(nil)
categories_with_values.include?(nil)
categories_with_values = Hash[categories.collect { |category| [category, eval("country.#{category}.try(:normalized_score)")] } ]
Hash[categories.collect { |category| [category, eval("country.#{category}.try(:normalized_score)")] } ]
c
weight_params.values
weight_params
weighted_categories
c
weight_params["#{category}_value".to_sym].to_i
weight_params["#{category}_value".to_sym].to_I
weight_params["#{category}_value".to_sym].to_int
weight_params["#{category}_value".to_sym]
score = eval("country.#{category}.try(:normalized_score)")
c
categories.map { |category| eval("country.#{category}.try(:normalized_score)")}c
categories.map { |category| eval("country.#{category}.try(:normalized_score)")}
categories.map { |category| eval("country.#{category}")}
categories.map { |category| eval("country.#{category}.normalized_score")}
exit
categories.map { |category| puts eval("country.#{category}.normalized_score")}exit
categories.map { |category| puts eval("country.#{category}.normalized_score")}
categories.map { |category| puts eval("country.#{category}")}
categories.map { |category| puts eval("country.category")}
categories.map { |category| puts eval("country")}
categories.map { |category| puts eval("#{country}")}
categories.map { |category| puts "#{country}"}
categories.map { |category| puts country}
categories.map { |category| country."#{category}"}
categories.map { |category| eval("#{country}.#{category}")}
country.science_rank.normalized_score
categories.map { |category| eval("#{country}.#{category}.normalized_score")}
country.science_rank
country
c
country
c
country
c
country.science_rank
country
c
country.science_rank
country
c
country
c
country
c
country
c
cc
country
c
country
country.science_rank
c
country.science_rank
country
c
country.science_rankc
country.science_rank.score
country.science_rank.first
country.science_rank
category
country
categories.map{|category| puts eval(country."#{category}")}
categories.map{|category| puts eval("#{category}")}
country
categories.map{|category| puts eval("#{country}")}
categories.map{|category| puts eval("#{category}")}
categories.map{|category| puts eval(#{category}")}
categories.map{|category| puts eval(country."#{category}")}
categories.map{|category| puts country.category}
categories.map{|category| puts eval("#{country}.#{category}")}
categories.map{|category| puts eval("#{country}.#{category}.normalized_score")}
categories.map{|category| eval("#{country}.#{category}.normalized_score")}
categories.map{|category| puts category}
category
country
categories.map { |category| eval("#{country}.#{category}.normalized_score")}
categories.map { |category| eval("#{country}.#{category}.normalized_score")}.include?(nil)
c
categories.map { |category| eval("#{country}.#{category}.normalized_score")}.include?(nil)
country
exit
categories
exit
weights.values
weights
Country.first.freedom_of_press_rank.normalized_score
Country.first.freedom_of_press_rank.score
Country.first.freedom_of_press_rank
Country.first.freedom_of_press_ranks
Country.first.ranks
Country.first
Country.last.ranks
Country.last
country
country.normal_cost_of_living_ranks
weights.keys.map{|key| key.gsub("_value", "")}
weights.keys.map{|key| key.gsub("_value")}
weights.keys
country
weights
c
@current_category.titleize
@current_category
c
@data.to_json.html_safe
@data.to_json
@data
c
@data.to_json
@data
c
@data
@data.to_json
raw @data
@data
c
@data.to_json.html_safe
@data.to_json
@data
exit
c.normal_cost_of_living_rank
c
    return if score > next_score || score < previous_score
previous_score = scores[i-1]
next_score = scores[i+1]
c
score =c
score
c
numbers.delete(numbers.max)
number
c
exit
numbers.reject{|n| n== this}.reduce(:*)
numbers.reject{|n| n== this}.reduce(0, :*)
numbers.reject{|n| n== this}
this
c
i
c
numbers
c
exit
products
c
profit > max_profit
profit = later_transactions.max - this_transaction
later_transactions.max - this_transaction
later_transactions = monies.select { |i| monies.index(i) > monies.index(this_transaction) }
c
later_transactions.max - this_transaction
later_transactions = monies.select { |i| monies.index(i) > monies.index(this_transaction) }
c
later_transactions.max - this_transaction
later_transactions = monies.select { |i| monies.index(i) > monies.index(this_transaction) }
c
later_transactions.max - this_transaction
later_transactions = monies.select { |i| monies.index(i) > monies.index(this_transaction) }
later_transactions.max - this_transaction
c
later_transactions.max - this_transaction
later_transactions = monies.select { |i| monies.index(i) > monies.index(this_transaction) }
c
max_profit
c
max_profit
c
max_profit
c
max_profit
c
max_profit = profit
profit > max_profit
profit > max_prifit
this_transaction
later_transactions.max
profit = later_transactions.max - this_transaction
later_transactions = monies.select { |i| monies.index(i) > monies.index(this_transaction) }
c
monies.select { |i| monies.index(i) > monies.index(this_transaction) }
exit
