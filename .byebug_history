exit
missing_countries
exit
missing_countries
exit
image_file_names
missing_countries
exit
missing_countries
exit
name.tr(" ", "")
name.snakeify
name.snakify
name.underscore
name.underscore.camelize
name
c
name
c
name
c
name
c
name
exit
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
c
name
exit
missing_countries
exit
c
name
c
name
exit
Dir.entries("./app/assets/images/country_images")exit
Dir.entries("./app/assets/images/country_images")
name
exit
name
exit
missing_countries
missing_images
exit
missing_countries.each{|c| c.underscore}
missing_countries.each{|c| c}
missing_countries.count
missing_countries.each{|c| c}
missing_countries.each{|c| "??"}
missing_countries.each{|c| "#{c}???"}
missing_countries.each{|c| c.underscore}
missing_countries.each{|c| c.underscore.camelize}
missing_countries.each{|c| c.underscore.parameterize("_").camelize!}
missing_countries.each{|c| c.underscore.parameterize("_").camelize}
missing_countries.each{|c| c.classify}
missing_countries.each{|c| c.camelize}
missing_countries
exit
Dir.entries("./app/assets/images/country_images").each{|name| name.gsub!(".jpg", "")}
Dir.entries("./app/assets/images/country_images").gsub(".jpg", "")
Dir.entries("./app/assets/images/country_images").each{|name| name.gsub(".jpg", "")}
Dir.entries("./app/assets/images/country_images")
image_file_names
display_names
missing_countries
c
scores.compact.empty?
scores.empty?
scores.nil?
scores.blank?
scores.present?
scores
c
(fiftieth...seventyfifth).include?(self.send(attribute))
(twentyfifth...fiftieth).include?(self.send(attribute))
(1...twentyfifth).include?(self.send(attribute))
seventyfifth
fiftieth
twentyfifth
range
self.send(attribute)
c
k
values_sorted[k]
values_sorted
c
Country.pluck("#{attribute.to_sym}").reject{ |v| v == nil }.sort
exit
reload!
Country.pluck("#{attribute.to_sym}")
Country.pluck("#{attribute.to_sym}").sort
exit
score * @weight_params["#{category}_value".to_sym].to_i
score = eval("country.#{category}").to_i
exit
@weight_params
"#{category}_value".to_sym
@weight_params["#{category}_value".to_sym]
score * @weight_params["#{category}_value".to_sym].to_i
score = eval("country.#{category}").to_i
eval("country.#{category}").to_i
exit
c
exit
country
Hash[@categories.collect { |category| [category, eval("country.#{category}")] } ]
@categories
exit
FilterAndSort.new().weighted_scores
exit
@countries
exit
find_by(name: raw_country_name)
find_by(name: raw_country_name).display_name
(byebug) raw_country_name
raw_country_name
c
raw_country_name
exit
raw_country_name
exit
country_display_name
exit
country_diaplay_name = CountryAlias.country_display_name(raw_country_name)
exit
score.gsub(/[^\d^\.]/, '').to_f
score..gsub(/[^\d^\.]/, '').to_f
score.to_f
score.to_float
score.to_i
score
acore
c
table.underscore.gsub("raw_", "").to_sym
table.underscore.gsub("raw_", "")
table.underscore
attribute_name(table)
country
c
scores
exit
raw_country_name
CountryAlias.find_by(name: raw_country_name)
country_display_name(raw_country_name)
exit
CountryAlias.first
CountryAlias.find_by(name: raw_country_name)
raw_country_name
country_display_name(raw_country_name)
exit
CountryAlias.find_by(name: raw_country_name)
CountryAlias.first
country_display_name(raw_country_name)
raw_country_name
c
@driver.get(url)
url
c
scores
c
scores.map{|s| s[1]}.max
scores.map{|s| puts s[1]}
scores[1]
scores.count
scores
exit
Country.find_by(name: "Kazakhstan")
RawReadingScore.pluck(:score)
RawReadingScores.pluck(:score)
scores
exit
table
scores
exit
scores
c
scores.count
scores
c
@current_results
c
default_results.reject{|v| v[:value] == 0 }.sort_by {|v|  v[:value]}
c
exit
default_results.sort_by {|v|  v[:value]}.last
default_results.first
default_results.last
default_results.sort_by {|v|  v["value"]}.last
default_results.sort_by {|v|  v["value"]}.first
default_results.sort_by {|v|  v["value"]}
params[:current_results]
c
default_results
c
default_results
exit
c
exit
c
score = eval("country.#{category}")
c
weighted_categories
weighted_categories.reduce(:+)/ weight_params.map{ |key, value| value.to_i }.reduce(:+)
weight_params.map{ |key, value| value.to_i }.reduce(:+)
weighted_categories.reduce(:+)
c
weight_params
score * weight_params["#{category}_value".to_sym].to_i
weight_params["#{category}_value".to_sym].to_i
score = eval("country.#{category}")
weighted_categories
exit
weight_params["#{category_name(category)}_value".to_sym].to_i
eval("country.#{category_name(category)}")
category
exit
weighted_categories
c
exit
RawFreedomOfPressScore.all.count
RawFreedomOfPress.all.count
scores
scores.count
table
c
